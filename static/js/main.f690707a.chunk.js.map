{"version":3,"sources":["global-support/TopNavigationBar.js","global-support/Attribution.js","bot-creation/RedditTypes.js","bot-creation/BotDetailsForm.js","bot-creation/ServicesForm.js","bot-creation/BotSummary.js","bot-creation/FinishedWorkflow.js","bot-creation/CreationPortal.js","view-bots/support/ViewBotsPanel.js","view-bots/ViewBotsPortal.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","position","marginBottom","spacing","title","flexGrow","menuButton","margin","TopNavigationBar","props","classes","stateMaker","activeWindow","botsVariant","botsDisabled","createVariant","createDisabled","bots","variant","disabled","create","initialState","window","location","hash","useState","state","updateState","AppBar","color","className","Toolbar","Typography","noWrap","Button","href","onClick","attribution","marginTop","Attribution","align","root","display","formControl","RedditTypesCheckboxGroup","React","subreddits","livethreads","setState","handleChange","name","event","target","checked","error","filter","v","length","FormControl","required","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","value","label","FormHelperText","BotDetailsForm","console","log","payload","undefined","botData","nameInput","val","hasError","helperText","typeInput","subredditInput","onNameInputChange","bind","onSubredditInputChange","newValue","newHelperText","test","newState","Object","assign","this","reason","Fragment","gutterBottom","Grid","container","item","xs","sm","TextField","id","fullWidth","InputProps","startAdornment","InputAdornment","Autocomplete","multiple","selectOnFocus","options","renderTags","getTagProps","map","option","index","Chip","renderInput","params","Component","ServicesForm","alertShown","fandom","isEnabled","isAvailable","invocation","symbol","term","query","inputs","fandom_name","isErrored","translate","flights","handleFandomSwitchToggle","handleFandomIndicator","handleTranslateSwitchToggle","handleTranslateIndicator","handleFandomTextInputOnChange","stopPropagation","newIndicator","newVal","md","Collapse","in","Alert","severity","ExpansionPanel","expanded","panelMain","ExpansionPanelSummary","panelSummary","aria-controls","aria-label","heading","onFocus","Switch","size","secondaryHeading","ExpansionPanelDetails","panelDetails","inputFields","inputProps","rightTextAlign","endAdornment","Divider","xm","ToggleButtonGroup","hidden","exclusive","ToggleButton","panelCaption","replace","withStyles","width","fontSize","typography","pxToRem","palette","text","primary","verticalAlign","secondary","justifyContent","marginRight","backgroundColor","background","default","borderBottom","padding","textAlign","BotSummary","FinishedWorkflow","LinearProgress","layout","marginLeft","breakpoints","up","paper","stepper","buttons","button","steps","CreationPortal","activeStep","setActiveStep","stepData","setStepData","ref","createRef","document","CssBaseline","Paper","Stepper","Step","key","StepLabel","step","Error","getStepContent","thisStepData","current","returnDataOrNull","nextStep","allData","startButton","success","light","pauseButton","deleteButton","dark","ViewBotsPanel","botName","isOnline","status","online","enabledStatusLabel","isPlayButtonDisabled","isPauseButtonDisabled","expandIcon","orientation","flexItem","ExpansionPanelActions","startIcon","ViewBotsPortal","botsList","fakeResponse","Container","Create","ThemeProvider","Bots","Boolean","hostname","match","ReactDOM","render","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","type","path","to","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f690707a.chunk.js","sourcesContent":["import React, { useState }from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: 'relative',\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n  \tmargin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function TopNavigationBar(props) {\r\n\tconst classes = useStyles();\r\n\r\n  function stateMaker(activeWindow) {\r\n    let botsVariant = 'text';\r\n    let botsDisabled = false;\r\n    let createVariant = 'text';\r\n    let createDisabled = false;\r\n\r\n    // This is the initial state upon render\r\n    switch (activeWindow) {\r\n      case '#/bots':\r\n        botsVariant = 'outlined';\r\n        botsDisabled = true;\r\n        break;\r\n      case '#/create':\r\n        createVariant = 'outlined';\r\n        createDisabled = true;\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n    const createdState = {\r\n      bots: {\r\n        variant: botsVariant,\r\n        disabled: botsDisabled,\r\n      },\r\n      create: {\r\n        variant: createVariant,\r\n        disabled: createDisabled,\r\n      }\r\n    }\r\n    return createdState;\r\n  }\r\n\r\n  const initialState = stateMaker(window.location.hash);\r\n  const [state, updateState] = useState(initialState);\r\n\r\n\treturn (\r\n\t\t<AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n\t    <Toolbar>\r\n\t      <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n\t        bots-as-a-service\r\n\t      </Typography>\r\n\r\n\t      <Button\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          href=\"#/bots\"\r\n          variant={ state.bots.variant }\r\n          disabled={ state.bots.disabled }\r\n          onClick={ () => updateState(stateMaker(\"#/bots\")) }\r\n        >\r\n          bots\r\n        </Button>\r\n\t      <Button\r\n           className={classes.menuButton}\r\n           color=\"inherit\"\r\n           href=\"#/create\"\r\n           variant={ state.create.variant }\r\n           disabled={ state.create.disabled }\r\n           onClick={ () => updateState(stateMaker(\"#/create\")) }\r\n        >\r\n           create\r\n         </Button>\r\n\t    </Toolbar>\r\n\t  </AppBar>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  attribution: {\r\n    marginTop: theme.spacing(5),\r\n  },\r\n}));\r\n\r\nexport default function Attribution() {\r\n\tconst classes = useStyles();\r\n\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" className={classes.attribution}>\r\n      created and maintained for csci-5828, team 10\r\n    </Typography>\r\n  );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function RedditTypesCheckboxGroup() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    subreddits: true,\n    livethreads: false,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  const { subreddits, livethreads } = state;\n  const error = [subreddits, livethreads].filter(v => v).length === 0;\n\n  // For now, we're hardcoding these to true/false and disabling inputs entirely.\n  // Current project scope is going to be only subreddits.\n  return (\n    <div className={classes.root}>\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">triggers</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={subreddits} onChange={handleChange('subreddits')} value=\"subreddits\" />}\n            label=\"subreddits\"\n            disabled\n          />\n          <FormControlLabel\n            control={<Checkbox checked={livethreads} onChange={handleChange('livethreads')} value=\"livethreads\" />}\n            label=\"livethreads (not yet implemented)\"\n            disabled\n          />\n        </FormGroup>\n        <FormHelperText>what to trigger your bot on. must check at least one option.</FormHelperText>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport RedditTypesCheckboxGroup from './RedditTypes.js';\n\nexport default class BotDetailsForm extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(props.payload);\n    if (props.payload === undefined || props.payload === {}){\n      this.state = {\n        botData: {},\n        nameInput: {\n          val: \"coolbot\",\n          hasError: false,\n          helperText: \"the name of your bot.\",\n        },\n        typeInput: {\n          hasError: false,\n        },\n        subredditInput: {\n          hasError: true,\n          helperText: \"one or more subreddits to operate in.\",\n          val: null,\n        }\n      }\n    } else {\n\t\t\tthis.state = props.payload;\n\t\t}\n\n    this.onNameInputChange = this.onNameInputChange.bind(this);\n    this.onSubredditInputChange = this.onSubredditInputChange.bind(this);\n  }\n\n  onNameInputChange(event) {\n    const newValue = event.target.value;\n    let forbiddenCharacters = /[^\\d\\w-]/;\n    let hasError = false;\n    let newHelperText = \"the name of your bot.\";\n    if (newValue.length > 64){\n      hasError = true;\n      newHelperText = \"your name is too long (must be < 64 chars).\";\n    } else if (forbiddenCharacters.test(newValue)) {\n      hasError = true;\n      newHelperText = \"you can only use alphanumeric characters, dash (-), or underscope (_).\";\n    } else {\n      hasError = false;\n      newHelperText = \"the name of your bot.\";\n    }\n\n    let newState = Object.assign({}, this.state);\n    newState.nameInput = {\n      hasError: hasError,\n      helperText: newHelperText,\n      val: !hasError ? newValue : \"\",\n    }\n    this.setState(newState);\n  }\n\n  onSubredditInputChange(event, value, reason) {\n    let newState = Object.assign({}, this.state);\n    let hasError = value.length === 0;\n    newState.subredditInput.hasError = hasError;\n    newState.subredditInput.val = hasError ? null : value;\n    this.setState(newState);\n  }\n\n  returnDataOrNull () {\n    // This will give us validation.\n    // Return null if there are any errors.\n    let anyHasError = this.state.nameInput.hasError || this.state.typeInput.hasError || this.state.subredditInput.hasError\n    if (anyHasError) {\n      return null;\n    }\n    else {\n      let payload = this.state;\n      return payload;\n    }\n  }\n\n  // Probably want to look at https://www.reddit.com/dev/api/#GET_api_subreddit_autocomplete_v2\n  render () {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          bot definition\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={12}>\n            <TextField\n              required\n              id=\"botName\"\n              name=\"botName\"\n              label=\"bot name\"\n              fullWidth\n              variant=\"outlined\"\n              error={this.state.nameInput.hasError}\n              helperText={this.state.nameInput.helperText}\n              onChange={this.onNameInputChange}\n              value={this.state.nameInput.val}\n              InputProps={{\n                startAdornment: <InputAdornment position=\"start\">/u/</InputAdornment>,\n              }}\n            />\n          </Grid>\n          <RedditTypesCheckboxGroup />\n          <Grid item xs={12}>\n            <Autocomplete\n              required\n              multiple\n              selectOnFocus\n              onChange={this.onSubredditInputChange}\n              options={subreddits}\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                  <Chip variant=\"outlined\" label={\"/r/\" + option} {...getTagProps({ index })} />\n                ))\n              }\n              renderInput={params => (\n                <TextField {...params} variant=\"outlined\" label=\"subreddits\" error={this.state.subredditInput.hasError} />\n              )}\n            />\n            <Typography variant=\"caption\" display=\"block\" color=\"textSecondary\" gutterBottom>\n              {this.state.subredditInput.helperText}\n            </Typography>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\n// STUB DATA\nconst subreddits = [\n  \"test\",\n  \"test1\",\n  \"test2\",\n  \"test3\"\n]\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\n//import ServicePanel from './support/ServicePanel';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ToggleButton from '@material-ui/lab/ToggleButton';\r\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse';\r\n\r\nconst styles = (theme) => ({\r\n\troot: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n\t\tcolor: theme.palette.text.primary,\r\n    flexGrow: 1,\r\n\t\tverticalAlign: 'baseline',\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n    color: theme.palette.text.secondary,\r\n    justifyContent: \"flex-end\",\r\n\t\tmarginRight: \"1rem\",\r\n  },\r\n  panelMain: {\r\n    backgroundColor: theme.palette.background.default,\r\n  },\r\n  panelSummary: {\r\n    borderBottom: '2px solid rgba(0, 0, 0, .125)',\r\n    marginBottom: -1,\r\n  },\r\n  panelDetails: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  panelCaption: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  rightTextAlign: {\r\n    textAlign: \"right\",\r\n  }\r\n});\r\n\r\n\r\nclass ServicesForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\t\tif (props.payload === undefined || props.payload === {}){\r\n\t\t\tthis.state = {\r\n\t      alertShown: false,\r\n\t      fandom: {\r\n\t        hasError: false,\r\n\t        isEnabled: false,\r\n\t        isAvailable: true,\r\n\t        invocation: {\r\n\t          symbol: \"!\",\r\n\t          term: \"fandom\",\r\n\t          query: \"[[ ]]\",\r\n\t        },\r\n\t        inputs: {\r\n\t          fandom_name: {\r\n\t            isErrored: false,\r\n\t            val: \"baas\",\r\n\t          }\r\n\t        }\r\n\t      },\r\n\t      translate: {\r\n\t        hasError: false,\r\n\t        isEnabled: false,\r\n\t        isAvailable: true,\r\n\t        invocation: {\r\n\t          symbol: \"!\",\r\n\t          term: \"translate\",\r\n\t          query: \"[[ ]]\",\r\n\t        }\r\n\t      },\r\n\t      flights: {\r\n\t        hasError: false,\r\n\t        isEnabled: false,\r\n\t        isAvailable: false,\r\n\t      }\r\n\t    }\r\n\t\t} else {\r\n\t\t\tthis.state = props.payload;\r\n\t\t}\r\n\r\n\r\n    this.handleFandomSwitchToggle = this.handleFandomSwitchToggle.bind(this);\r\n    this.handleFandomIndicator = this.handleFandomIndicator.bind(this);\r\n    this.handleTranslateSwitchToggle = this.handleTranslateSwitchToggle.bind(this);\r\n    this.handleTranslateIndicator = this.handleTranslateIndicator.bind(this);\r\n    this.handleFandomTextInputOnChange = this.handleFandomTextInputOnChange.bind(this);\r\n  }\r\n\r\n  handleFandomSwitchToggle(event) {\r\n    event.stopPropagation();\r\n    let newState = Object.assign({}, this.state);\r\n    newState.fandom.isEnabled = !this.state.fandom.isEnabled;\r\n    newState.alertShown = (!newState.translate.isEnabled && !newState.fandom.isEnabled);\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleFandomIndicator(event, newIndicator) {\r\n    if (newIndicator !== null) {\r\n      let newState = Object.assign({}, this.state);\r\n      newState.fandom.invocation.query = newIndicator;\r\n      this.setState(newState);\r\n    }\r\n  };\r\n\r\n  handleFandomTextInputOnChange(event) {\r\n    let newVal = event.target.value;\r\n    let newState = Object.assign({}, this.state);\r\n    newState.fandom.inputs.fandom_name.isErrored = newVal.length === 0;\r\n    newState.fandom.inputs.fandom_name.val = newVal;\r\n    newState.fandom.hasError = newVal.length === 0;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleTranslateSwitchToggle(event) {\r\n    event.stopPropagation();\r\n    let newState = Object.assign({}, this.state);\r\n    newState.translate.isEnabled = !this.state.translate.isEnabled;\r\n    newState.alertShown = (!newState.translate.isEnabled && !newState.fandom.isEnabled);\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleTranslateIndicator(event, newIndicator) {\r\n    if (newIndicator !== null) {\r\n      let newState = Object.assign({}, this.state);\r\n      newState.translate.invocation.query = newIndicator;\r\n      this.setState(newState);\r\n    }\r\n  };\r\n\r\n  returnDataOrNull() {\r\n    // This will give us validation.\r\n    // Return null if there are any errors.\r\n    if (!this.state.fandom.isEnabled && !this.state.translate.isEnabled) {\r\n      let newState = Object.assign({}, this.state);\r\n      newState.alertShown = true;\r\n      this.setState(newState);\r\n      return null;\r\n    } else if (this.state.fandom.hasError || this.state.translate.hasError) {\r\n      return null;\r\n    } else {\r\n      return this.state;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          services\r\n        </Typography>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={12}>\r\n            <Collapse in={ this.state.alertShown }>\r\n              <Alert severity=\"warning\" onClick={() => {\r\n                let newState = Object.assign({}, this.state);\r\n                newState.alertShown = false;\r\n                this.setState(newState);\r\n              }}>Your bot won't be cool without a service -- enable at least one!</Alert>\r\n            </Collapse>\r\n          </Grid>\r\n          <Grid item xs={12} md={12}>\r\n            <ExpansionPanel\r\n              expanded={ this.state.fandom.isEnabled }\r\n              disabled={ !this.state.fandom.isAvailable }\r\n              className={ classes.panelMain }\r\n            >\r\n              <ExpansionPanelSummary\r\n                className={ classes.panelSummary }\r\n                aria-controls=\"fandom-content\"\r\n                id=\"fandom-header\"\r\n              >\r\n                <FormControlLabel\r\n                  aria-label=\"Acknowledge\"\r\n                  className={ classes.heading }\r\n                  onClick={ this.handleFandomSwitchToggle }\r\n                  onFocus={ this.handleFandomSwitchToggle }\r\n                  control={ <Switch checked={ this.state.fandom.isEnabled } size=\"small\" /> }\r\n                  label=\"fandom\"\r\n                />\r\n                <Typography className={ classes.secondaryHeading }>\r\n                  Search the input fandom and return the top results.\r\n                </Typography>\r\n              </ExpansionPanelSummary>\r\n              <ExpansionPanelDetails className={ classes.panelDetails }>\r\n                <Grid container spacing={3}>\r\n                  <Grid item xs={12} sm={12}>\r\n                    <TextField\r\n        \t\t\t\t\t\t\tclassName={ classes.inputFields }\r\n        \t\t\t\t\t\t\tlabel=\"name\"\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={ this.state.fandom.inputs.fandom_name.val }\r\n        \t\t\t\t\t\t\thelperText=\"the fandom subdomain, i.e.: [name].fandom.com\"\r\n        \t\t\t\t\t\t\tcolor=\"primary\"\r\n                      error={ this.state.fandom.inputs.fandom_name.isErrored }\r\n        \t\t\t\t\t\t\trequired={ true }\r\n                      onChange={ this.handleFandomTextInputOnChange }\r\n        \t\t\t\t\t\t\tinputProps={{\r\n        \t\t\t\t\t\t\t\tclassName: classes.rightTextAlign,\r\n        \t\t\t\t\t\t\t\talign: \"right\",\r\n        \t\t\t\t\t\t\t}}\r\n        \t\t\t\t\t\t\tInputProps={{\r\n        \t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">.fandom.com</InputAdornment>,\r\n        \t\t\t\t\t\t\t}}\r\n        \t\t\t\t\t\t\tvariant=\"outlined\"\r\n        \t\t\t\t\t\t/>\r\n                  </Grid>\r\n                </Grid>\r\n              </ExpansionPanelDetails>\r\n              <Divider />\r\n              <ExpansionPanelDetails className={ classes.panelDetails }>\r\n                <Grid container spacing={1}>\r\n                  <Grid item xm={12} sm={12}>\r\n                    <ToggleButtonGroup\r\n                      hidden={ false }\r\n                      size=\"small\"\r\n                      value={ this.state.fandom.invocation.query }\r\n                      exclusive\r\n                      onChange={ this.handleFandomIndicator }\r\n                      aria-label=\"indicator selector\"\r\n                    >\r\n                      <ToggleButton value=\"[[ ]]\" aria-label=\"double square bracket\">\r\n                        {\"[[ ]]\"}\r\n                      </ToggleButton>\r\n                      <ToggleButton value=\"{{ }}\" aria-label=\"double curly brackets\">\r\n                        {\"{{ }}\"}\r\n                      </ToggleButton>\r\n                      <ToggleButton value=\"< >\" aria-label=\"right aligned\">\r\n                        {\"< >\"}\r\n                      </ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                  </Grid>\r\n                  <Grid item xm={12} sm={12}>\r\n                    <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\r\n                      query indicator - an example invocation:\r\n                    </Typography>\r\n                    <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\r\n                       <code>\r\n                        { this.state.fandom.invocation.symbol + this.state.fandom.invocation.term }\r\n                        { this.state.fandom.invocation.query.replace(\" \", \"search-term\") }\r\n                       </code>\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n\r\n\r\n          <ExpansionPanel\r\n            expanded={ this.state.translate.isEnabled }\r\n            disabled={ !this.state.translate.isAvailable }\r\n            className={ classes.panelMain }\r\n          >\r\n            <ExpansionPanelSummary\r\n              className={ classes.panelSummary }\r\n              aria-controls=\"translation-content\"\r\n              id=\"translation-header\"\r\n            >\r\n              <FormControlLabel\r\n                aria-label=\"Acknowledge\"\r\n                className={ classes.heading }\r\n                onClick={ this.handleTranslateSwitchToggle }\r\n                onFocus={ this.handleTranslateSwitchToggle }\r\n                control={ <Switch checked={ this.state.translate.isEnabled } size=\"small\" /> }\r\n                label=\"translation\"\r\n              />\r\n              <Typography className={ classes.secondaryHeading }>\r\n                Translate the parent post or comment to the target language.\r\n              </Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails className={ classes.panelDetails }>\r\n              <Grid container spacing={3}>\r\n                <Grid item xs={12} sm={6}>\r\n        \t\t\t\t\t<Typography variant=\"caption\">no inputs for this service</Typography>\r\n        \t\t\t\t</Grid>\r\n              </Grid>\r\n            </ExpansionPanelDetails>\r\n            <Divider />\r\n            <ExpansionPanelDetails className={ classes.panelDetails }>\r\n              <Grid container spacing={1}>\r\n                <Grid item xm={12} sm={12}>\r\n                  <ToggleButtonGroup\r\n                    hidden={ false }\r\n                    size=\"small\"\r\n                    value={ this.state.translate.invocation.query }\r\n                    exclusive\r\n                    onChange={ this.handleTranslateIndicator }\r\n                    aria-label=\"indicator selector\"\r\n                  >\r\n                    <ToggleButton value=\"[[ ]]\" aria-label=\"double square bracket\">\r\n                      {\"[[ ]]\"}\r\n                    </ToggleButton>\r\n                    <ToggleButton value=\"{{ }}\" aria-label=\"double curly brackets\">\r\n                      {\"{{ }}\"}\r\n                    </ToggleButton>\r\n                    <ToggleButton value=\"< >\" aria-label=\"right aligned\">\r\n                      {\"< >\"}\r\n                    </ToggleButton>\r\n                  </ToggleButtonGroup>\r\n                </Grid>\r\n                <Grid item xm={12} sm={12}>\r\n                  <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\r\n                    query indicator - an example invocation:\r\n                  </Typography>\r\n                  <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\r\n                     <code>\r\n                      { this.state.translate.invocation.symbol + this.state.translate.invocation.term }\r\n                      { this.state.translate.invocation.query.replace(\" \", \"search-term\") }\r\n                     </code>\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n          <ExpansionPanel\r\n            expanded={ this.state.flights.isEnabled }\r\n            disabled={ !this.state.flights.isAvailable }\r\n            className={ classes.panelMain }\r\n          >\r\n            <ExpansionPanelSummary\r\n              className={ classes.panelSummary }\r\n              aria-controls=\"flights-content\"\r\n              id=\"flights-header\"\r\n            >\r\n              <FormControlLabel\r\n                aria-label=\"Acknowledge\"\r\n                className={ classes.heading }\r\n                control={ <Switch checked={ this.state.flights.isEnabled } size=\"small\" /> }\r\n                label=\"flights\"\r\n              />\r\n              <Typography className={ classes.secondaryHeading }>\r\n                Get flight data.\r\n              </Typography>\r\n            </ExpansionPanelSummary>\r\n          </ExpansionPanel>\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ServicesForm);\r\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\n\n\n\nconst styles = (theme) => ({\n});\n\nclass BotSummary extends React.Component {\n  constructor(props){\n    super(props);\n    console.log(\"evan\", props.payload);\n  }\n\n  render() {\n    const { classes } = this.props;\n    console.log(classes);\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          summary\n        </Typography>\n        <Grid container spacing={2}>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(BotSummary);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function FinishedWorkflow() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        creating your bot!\n      </Typography>\n      <Typography variant=\"subtitle1\">\n        <LinearProgress />\n        we're bringing your bot to life. wow!\n      </Typography>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport BotDetailsForm from './BotDetailsForm';\r\nimport ServicesForm from './ServicesForm';\r\nimport BotSummary from './BotSummary';\r\nimport FinishedWorkflow from './FinishedWorkflow';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  layout: {\r\n    width: 'auto',\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 1000,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst steps = ['details', 'services', 'review'];\r\n\r\nfunction getStepContent(step, ref, payload) {\r\n  switch (step) {\r\n    case 0:\r\n      return <BotDetailsForm payload={payload} ref={ref} />;\r\n    case 1:\r\n      return <ServicesForm payload={payload} ref={ref} />;\r\n    case 2:\r\n      return <BotSummary payload={payload} ref={ref} />;\r\n    default:\r\n      throw new Error('Unknown step');\r\n  }\r\n}\r\n\r\nexport default function CreationPortal() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [stepData, setStepData] = React.useState({});\r\n  let ref = React.createRef();\r\n\r\n  const handleNext = () => {\r\n    let thisStepData = ref.current.returnDataOrNull()\r\n\r\n    if (thisStepData !== null) {\r\n      stepData[activeStep] = thisStepData;\r\n      const nextStep = activeStep + 1;\r\n      // Hacky alarm! If the next is the summary page, send\r\n      // the entire package.\r\n      if (nextStep === 3) {\r\n        let allData = Object.assign({}, stepData);\r\n        stepData[nextStep] = allData;\r\n      }\r\n      setStepData(stepData);\r\n      setActiveStep(activeStep + 1);\r\n    }\r\n    else {\r\n      console.log(\"didn't get any data; forcing stop.\");\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  document.title = 'bots-as-a-service: create';\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n            create-a-bot\r\n          </Typography>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map(label => (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n          <React.Fragment>\r\n            {activeStep === steps.length ? (\r\n              <FinishedWorkflow />\r\n            ) : (\r\n              <React.Fragment>\r\n                {getStepContent(activeStep, ref, stepData[activeStep])}\r\n                <div className={classes.buttons}>\r\n                  {activeStep !== 0 && (\r\n                    <Button onClick={handleBack} className={classes.button}>\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleNext}\r\n                    className={classes.button}\r\n                  >\r\n                    {activeStep === steps.length - 1 ? 'submit' : 'next'}\r\n                  </Button>\r\n                </div>\r\n              </React.Fragment>\r\n            )}\r\n          </React.Fragment>\r\n        </Paper>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n\t\tcolor: theme.palette.text.primary,\r\n    flexGrow: 1,\r\n\t\tverticalAlign: 'baseline',\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n    justifyContent: \"flex-end\",\r\n\t\tmarginRight: \"1rem\",\r\n  },\r\n  startButton: {\r\n  \tcolor: theme.palette.success.light,\r\n  },\r\n  pauseButton: {\r\n  \tcolor: theme.palette.primary.light,\r\n  },\r\n\tdeleteButton: {\r\n  \tcolor: theme.palette.error.dark,\r\n  },\r\n}));\r\n\r\nexport default function ViewBotsPanel(props){\r\n\tconst classes = useStyles();\r\n\tconst botName = props.payload.name;\r\n\tconst isOnline = props.payload.status.online;\r\n\r\n\tconst enabledStatusLabel = isOnline ? 'disabled' : 'active';\r\n\r\n\tconst isPlayButtonDisabled = !isOnline;\r\n\tconst isPauseButtonDisabled = !isPlayButtonDisabled;\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={botName + \"-header\"}\r\n      >\r\n        <Typography className={classes.heading}>{botName}</Typography>\r\n        <Typography className={classes.secondaryHeading}>{enabledStatusLabel}</Typography>\r\n\t\t\t\t<Divider orientation=\"vertical\" flexItem />\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n        <Typography>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\r\n          sit amet blandit leo lobortis eget.\r\n        </Typography>\r\n      </ExpansionPanelDetails>\r\n      <Divider />\r\n      <ExpansionPanelActions>\r\n      \t<Button className={classes.startButton} startIcon={<PlayArrowIcon />} disabled={isPlayButtonDisabled}>\r\n\t        Start\r\n\t      </Button>\r\n\t      <Button className={classes.pauseButton} startIcon={<PauseIcon />} disabled={isPauseButtonDisabled}>\r\n\t        Disable\r\n\t      </Button>\r\n        <Button className={classes.deleteButton} startIcon={<DeleteIcon />}>\r\n\t        Delete\r\n\t      </Button>\r\n      </ExpansionPanelActions>\r\n    </ExpansionPanel>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport ViewBotsPanel from './support/ViewBotsPanel';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n    width: '100%',\r\n  }\r\n}));\r\n\r\nexport default function ViewBotsPortal(){\r\n\tdocument.title = 'bots-as-a-service: bots';\r\n\t// eslint-disable-next-line\r\n\tconst classes = useStyles();\r\n\r\n\tconst botsList = fakeResponse.map((payload) =>\r\n\t\t<ViewBotsPanel key={payload.name} payload={payload} />\r\n\t)\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Container>\r\n\t\t\t\t{botsList}\r\n\t\t\t</Container>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\n// STUB\r\nconst fakeResponse = [\r\n  {\r\n    \"name\": \"stopped-bot01\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": false,\r\n        \"valid\": true\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  },\r\n\t{\r\n    \"name\": \"healthy-bot02\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": true,\r\n        \"valid\": true\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  },\r\n\t{\r\n    \"name\": \"invalid-bot03\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": false,\r\n        \"valid\": false\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  }\r\n]\r\n","import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport TopNavigationBar from './global-support/TopNavigationBar';\nimport Attribution from './global-support/Attribution';\nimport CreationPortal from './bot-creation/CreationPortal';\nimport ViewBotsPortal from './view-bots/ViewBotsPortal';\n\nexport default function App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <TopNavigationBar />\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/create\">\n                <Create theme={theme}/>\n              </Route>\n              <Route path=\"/bots\">\n                <Bots theme={theme}/>\n              </Route>\n              <Route path=\"/\">\n                <Redirect to=\"/bots\" />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n        <Attribution />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nfunction Create(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <CreationPortal />\n    </ThemeProvider>\n  );\n}\n\nfunction Bots(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <ViewBotsPortal />\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}