{"version":3,"sources":["global-support/TopNavigationBar.js","global-support/Attribution.js","bot-creation/RedditTypes.js","bot-creation/BotDetailsForm.js","bot-creation/ServicesForm.js","bot-creation/BotSummary.js","bot-creation/FinishedWorkflow.js","bot-creation/CreationPortal.js","view-bots/support/ViewBotsPanel.js","view-bots/ViewBotsPortal.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","position","marginBottom","spacing","title","flexGrow","menuButton","margin","TopNavigationBar","props","classes","stateMaker","activeWindow","botsVariant","botsDisabled","createVariant","createDisabled","bots","variant","disabled","create","initialState","window","location","hash","useState","state","updateState","AppBar","color","className","Toolbar","Typography","noWrap","Button","href","onClick","attribution","marginTop","Attribution","align","root","display","formControl","RedditTypesCheckboxGroup","React","subreddits","livethreads","setState","handleChange","name","event","target","checked","error","filter","v","length","FormControl","required","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","value","label","FormHelperText","BotDetailsForm","undefined","payload","botData","nameInput","val","hasError","helperText","typeInput","subredditInput","onNameInputChange","bind","onSubredditInputChange","newValue","newHelperText","test","newState","Object","assign","this","reason","Fragment","gutterBottom","Grid","container","item","xs","sm","TextField","id","fullWidth","InputProps","startAdornment","InputAdornment","Autocomplete","freeSolo","multiple","selectOnFocus","options","basicSubreddits","renderTags","getTagProps","map","option","index","Chip","renderInput","params","Component","ServicesForm","alertShown","fandom","isEnabled","isAvailable","invocation","symbol","term","query","inputs","fandom_name","isErrored","translate","flights","handleFandomSwitchToggle","handleFandomIndicator","handleTranslateSwitchToggle","handleTranslateIndicator","handleFandomTextInputOnChange","stopPropagation","newIndicator","newVal","md","Collapse","in","Alert","severity","ExpansionPanel","expanded","panelMain","ExpansionPanelSummary","panelSummary","aria-controls","aria-label","heading","onFocus","Switch","size","secondaryHeading","ExpansionPanelDetails","panelDetails","inputFields","inputProps","rightTextAlign","endAdornment","Divider","xm","ToggleButtonGroup","hidden","exclusive","ToggleButton","panelCaption","replace","withStyles","width","fontSize","typography","pxToRem","palette","text","primary","verticalAlign","secondary","justifyContent","marginRight","backgroundColor","background","default","borderBottom","padding","textAlign","ServiceRow","TableRow","TableCell","scope","entries","k","key","getInputsItem","getInvocationItem","BotSummary","createServiceRow","serviceName","serviceConfigs","TableContainer","Paper","Table","header","TableHead","TableBody","join","StatusPanel","stage","setStage","setHasError","currentErrorMessage","setErrorMessage","makingRequest","setMakingRequest","useEffect","setTimeout","fetch","method","headers","body","JSON","stringify","then","response","json","data","handleLifeCycle","Grow","timeout","LinearProgress","action","FinishedWorkflow","botName","newData","auth","username","password","user_agent","client_id","client_secret","services","status","online","version_info","description","version","serviceConfig","url","default_language","thisServiceData","service_name","language","push","transformData","layout","marginLeft","breakpoints","up","paper","stepper","buttons","button","steps","CreationPortal","activeStep","setActiveStep","stepData","setStepData","ref","createRef","document","CssBaseline","Stepper","Step","StepLabel","step","Error","getStepContent","thisStepData","current","returnDataOrNull","nextStep","allData","console","log","enabledBotSummary","success","dark","startButton","light","pauseButton","deleteButton","ViewBotsPanel","isOnline","enabledStatusLabel","isPlayButtonDisabled","isPauseButtonDisabled","expandIcon","orientation","flexItem","ExpansionPanelActions","startIcon","ViewBotsPortal","loadedIn","isLoading","setIsLoading","setBotsList","setLoadedIn","botsList","Container","Skeleton","animation","height","Create","ThemeProvider","Bots","Boolean","hostname","match","ReactDOM","render","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","type","path","to","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a5cb3d68.chunk.js","sourcesContent":["import React, { useState }from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: 'relative',\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n  \tmargin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function TopNavigationBar(props) {\r\n\tconst classes = useStyles();\r\n\r\n  function stateMaker(activeWindow) {\r\n    let botsVariant = 'text';\r\n    let botsDisabled = false;\r\n    let createVariant = 'text';\r\n    let createDisabled = false;\r\n\r\n    // This is the initial state upon render\r\n    switch (activeWindow) {\r\n      case '#/bots':\r\n        botsVariant = 'outlined';\r\n        botsDisabled = true;\r\n        break;\r\n      case '#/create':\r\n        createVariant = 'outlined';\r\n        createDisabled = true;\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n    const createdState = {\r\n      bots: {\r\n        variant: botsVariant,\r\n        disabled: botsDisabled,\r\n      },\r\n      create: {\r\n        variant: createVariant,\r\n        disabled: createDisabled,\r\n      }\r\n    }\r\n    return createdState;\r\n  }\r\n\r\n  const initialState = stateMaker(window.location.hash);\r\n  const [state, updateState] = useState(initialState);\r\n\r\n\treturn (\r\n\t\t<AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n\t    <Toolbar>\r\n\t      <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n\t        bots-as-a-service\r\n\t      </Typography>\r\n\r\n\t      <Button\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          href=\"#/bots\"\r\n          variant={ state.bots.variant }\r\n          disabled={ state.bots.disabled }\r\n          onClick={ () => updateState(stateMaker(\"#/bots\")) }\r\n        >\r\n          bots\r\n        </Button>\r\n\t      <Button\r\n           className={classes.menuButton}\r\n           color=\"inherit\"\r\n           href=\"#/create\"\r\n           variant={ state.create.variant }\r\n           disabled={ state.create.disabled }\r\n           onClick={ () => updateState(stateMaker(\"#/create\")) }\r\n        >\r\n           create\r\n         </Button>\r\n\t    </Toolbar>\r\n\t  </AppBar>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  attribution: {\r\n    marginTop: theme.spacing(5),\r\n  },\r\n}));\r\n\r\nexport default function Attribution() {\r\n\tconst classes = useStyles();\r\n\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" className={classes.attribution}>\r\n      created and maintained for csci-5828, team 10\r\n    </Typography>\r\n  );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function RedditTypesCheckboxGroup() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    subreddits: true,\n    livethreads: false,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  const { subreddits, livethreads } = state;\n  const error = [subreddits, livethreads].filter(v => v).length === 0;\n\n  // For now, we're hardcoding these to true/false and disabling inputs entirely.\n  // Current project scope is going to be only subreddits.\n  return (\n    <div className={classes.root}>\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">triggers</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={subreddits} onChange={handleChange('subreddits')} value=\"subreddits\" />}\n            label=\"subreddits\"\n            disabled\n          />\n          <FormControlLabel\n            control={<Checkbox checked={livethreads} onChange={handleChange('livethreads')} value=\"livethreads\" />}\n            label=\"livethreads (not yet implemented)\"\n            disabled\n          />\n        </FormGroup>\n        <FormHelperText>what to trigger your bot on. must check at least one option.</FormHelperText>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport RedditTypesCheckboxGroup from './RedditTypes.js';\n\nexport default class BotDetailsForm extends React.Component {\n  constructor(props) {\n    super(props);\n    if (props.payload === undefined || props.payload === {}){\n      this.state = {\n        botData: {},\n        nameInput: {\n          val: \"coolbot\",\n          hasError: false,\n          helperText: \"the name of your bot.\",\n        },\n        typeInput: {\n          hasError: false,\n        },\n        subredditInput: {\n          hasError: true,\n          helperText: \"one or more subreddits to operate in. press enter in between entries.\",\n          val: null,\n        }\n      }\n    } else {\n\t\t\tthis.state = props.payload;\n\t\t}\n\n    this.onNameInputChange = this.onNameInputChange.bind(this);\n    this.onSubredditInputChange = this.onSubredditInputChange.bind(this);\n  }\n\n  onNameInputChange(event) {\n    const newValue = event.target.value;\n    let forbiddenCharacters = /[^\\d\\w-]/;\n    let hasError = false;\n    let newHelperText = \"the name of your bot.\";\n    if (newValue.length > 64){\n      hasError = true;\n      newHelperText = \"your name is too long (must be < 64 chars).\";\n    } else if (forbiddenCharacters.test(newValue)) {\n      hasError = true;\n      newHelperText = \"you can only use alphanumeric characters, dash (-), or underscope (_).\";\n    } else {\n      hasError = false;\n      newHelperText = \"the name of your bot.\";\n    }\n\n    let newState = Object.assign({}, this.state);\n    newState.nameInput = {\n      hasError: hasError,\n      helperText: newHelperText,\n      val: !hasError ? newValue : \"\",\n    }\n    this.setState(newState);\n  }\n\n  onSubredditInputChange(event, value, reason) {\n    let newState = Object.assign({}, this.state);\n    let hasError = value.length === 0;\n    newState.subredditInput.hasError = hasError;\n    newState.subredditInput.val = hasError ? null : value;\n    this.setState(newState);\n  }\n\n  returnDataOrNull () {\n    // This will give us validation.\n    // Return null if there are any errors.\n    let anyHasError = this.state.nameInput.hasError || this.state.typeInput.hasError || this.state.subredditInput.hasError\n    if (anyHasError) {\n      return null;\n    }\n    else {\n      let payload = this.state;\n      return payload;\n    }\n  }\n\n  // Probably want to look at https://www.reddit.com/dev/api/#GET_api_subreddit_autocomplete_v2\n  render () {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          bot definition\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={12}>\n            <TextField\n              required\n              id=\"botName\"\n              name=\"botName\"\n              label=\"bot name\"\n              fullWidth\n              variant=\"outlined\"\n              error={this.state.nameInput.hasError}\n              helperText={this.state.nameInput.helperText}\n              onChange={this.onNameInputChange}\n              value={this.state.nameInput.val}\n              InputProps={{\n                startAdornment: <InputAdornment position=\"start\">/u/</InputAdornment>,\n              }}\n            />\n          </Grid>\n          <RedditTypesCheckboxGroup />\n          <Grid item xs={12}>\n            <Autocomplete\n              required\n              freeSolo\n              multiple\n              selectOnFocus\n              onChange={ this.onSubredditInputChange }\n              options={ basicSubreddits }\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                  <Chip variant=\"outlined\" label={\"/r/\" + option} {...getTagProps({ index })} />\n                ))\n              }\n              renderInput={params => (\n                <TextField {...params} variant=\"outlined\" label=\"subreddits\" error={this.state.subredditInput.hasError} />\n              )}\n            />\n            <Typography variant=\"caption\" display=\"block\" color=\"textSecondary\" gutterBottom>\n              {this.state.subredditInput.helperText}\n            </Typography>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst basicSubreddits = [\n  \"botsasaservice_test\",\n]\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n//import ServicePanel from './support/ServicePanel';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Divider from '@material-ui/core/Divider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport Alert from '@material-ui/lab/Alert';\nimport Collapse from '@material-ui/core/Collapse';\n\nconst styles = (theme) => ({\n\troot: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(16),\n\t\tcolor: theme.palette.text.primary,\n    flexGrow: 1,\n\t\tverticalAlign: 'baseline',\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(16),\n    color: theme.palette.text.secondary,\n    justifyContent: \"flex-end\",\n\t\tmarginRight: \"1rem\",\n  },\n  panelMain: {\n    backgroundColor: theme.palette.background.default,\n  },\n  panelSummary: {\n    borderBottom: '2px solid rgba(0, 0, 0, .125)',\n    marginBottom: -1,\n  },\n  panelDetails: {\n    padding: theme.spacing(2),\n  },\n  panelCaption: {\n    color: theme.palette.text.secondary,\n  },\n  rightTextAlign: {\n    textAlign: \"right\",\n  }\n});\n\n\nclass ServicesForm extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tif (props.payload === undefined || props.payload === {}){\n\t\t\tthis.state = {\n\t      alertShown: false,\n\t      fandom: {\n\t        hasError: false,\n\t        isEnabled: false,\n\t        isAvailable: true,\n\t        invocation: {\n\t          symbol: \"!\",\n\t          term: \"fandom\",\n\t          query: \"[[ ]]\",\n\t        },\n\t        inputs: {\n\t          fandom_name: {\n\t            isErrored: false,\n\t            val: \"baas\",\n\t          }\n\t        }\n\t      },\n\t      translate: {\n\t        hasError: false,\n\t        isEnabled: false,\n\t        isAvailable: true,\n\t        invocation: {\n\t          symbol: \"!\",\n\t          term: \"translate\",\n\t          query: \"[[ ]]\",\n\t        }\n\t      },\n\t      flights: {\n\t        hasError: false,\n\t        isEnabled: false,\n\t        isAvailable: false,\n\t      }\n\t    }\n\t\t} else {\n\t\t\tthis.state = props.payload;\n\t\t}\n\n\n    this.handleFandomSwitchToggle = this.handleFandomSwitchToggle.bind(this);\n    this.handleFandomIndicator = this.handleFandomIndicator.bind(this);\n    this.handleTranslateSwitchToggle = this.handleTranslateSwitchToggle.bind(this);\n    this.handleTranslateIndicator = this.handleTranslateIndicator.bind(this);\n    this.handleFandomTextInputOnChange = this.handleFandomTextInputOnChange.bind(this);\n  }\n\n  handleFandomSwitchToggle(event) {\n    event.stopPropagation();\n    let newState = Object.assign({}, this.state);\n    newState.fandom.isEnabled = !this.state.fandom.isEnabled;\n    newState.alertShown = (!newState.translate.isEnabled && !newState.fandom.isEnabled);\n    this.setState(newState);\n  }\n\n  handleFandomIndicator(event, newIndicator) {\n    if (newIndicator !== null) {\n      let newState = Object.assign({}, this.state);\n      newState.fandom.invocation.query = newIndicator;\n      this.setState(newState);\n    }\n  };\n\n  handleFandomTextInputOnChange(event) {\n    let newVal = event.target.value;\n    let newState = Object.assign({}, this.state);\n    newState.fandom.inputs.fandom_name.isErrored = newVal.length === 0;\n    newState.fandom.inputs.fandom_name.val = newVal;\n    newState.fandom.hasError = newVal.length === 0;\n    this.setState(newState);\n  }\n\n  handleTranslateSwitchToggle(event) {\n    event.stopPropagation();\n    let newState = Object.assign({}, this.state);\n    newState.translate.isEnabled = !this.state.translate.isEnabled;\n    newState.alertShown = (!newState.translate.isEnabled && !newState.fandom.isEnabled);\n    this.setState(newState);\n  }\n\n  handleTranslateIndicator(event, newIndicator) {\n    if (newIndicator !== null) {\n      let newState = Object.assign({}, this.state);\n      newState.translate.invocation.query = newIndicator;\n      this.setState(newState);\n    }\n  };\n\n  returnDataOrNull() {\n    // This will give us validation.\n    // Return null if there are any errors.\n    if (!this.state.fandom.isEnabled && !this.state.translate.isEnabled) {\n      let newState = Object.assign({}, this.state);\n      newState.alertShown = true;\n      this.setState(newState);\n      return null;\n    } else if (this.state.fandom.hasError || this.state.translate.hasError) {\n      return null;\n    } else {\n      return this.state;\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          services\n        </Typography>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={12}>\n            <Collapse in={ this.state.alertShown }>\n              <Alert severity=\"warning\" onClick={() => {\n                let newState = Object.assign({}, this.state);\n                newState.alertShown = false;\n                this.setState(newState);\n              }}>Your bot won't be cool without a service -- enable at least one!</Alert>\n            </Collapse>\n          </Grid>\n          <Grid item xs={12} md={12}>\n            <ExpansionPanel\n              expanded={ this.state.fandom.isEnabled }\n              disabled={ !this.state.fandom.isAvailable }\n              className={ classes.panelMain }\n            >\n              <ExpansionPanelSummary\n                className={ classes.panelSummary }\n                aria-controls=\"fandom-content\"\n                id=\"fandom-header\"\n              >\n                <FormControlLabel\n                  aria-label=\"Acknowledge\"\n                  className={ classes.heading }\n                  onClick={ this.handleFandomSwitchToggle }\n                  onFocus={ this.handleFandomSwitchToggle }\n                  control={ <Switch checked={ this.state.fandom.isEnabled } size=\"small\" /> }\n                  label=\"fandom\"\n                />\n                <Typography className={ classes.secondaryHeading }>\n                  Search the input fandom and return the top results.\n                </Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails className={ classes.panelDetails }>\n                <Grid container spacing={3}>\n                  <Grid item xs={12} sm={12}>\n                    <TextField\n        \t\t\t\t\t\t\tclassName={ classes.inputFields }\n        \t\t\t\t\t\t\tlabel=\"name\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={ this.state.fandom.inputs.fandom_name.val }\n        \t\t\t\t\t\t\thelperText=\"the fandom subdomain, i.e.: [name].fandom.com\"\n        \t\t\t\t\t\t\tcolor=\"primary\"\n                      error={ this.state.fandom.inputs.fandom_name.isErrored }\n        \t\t\t\t\t\t\trequired={ true }\n                      onChange={ this.handleFandomTextInputOnChange }\n        \t\t\t\t\t\t\tinputProps={{\n        \t\t\t\t\t\t\t\tclassName: classes.rightTextAlign,\n        \t\t\t\t\t\t\t\talign: \"right\",\n        \t\t\t\t\t\t\t}}\n        \t\t\t\t\t\t\tInputProps={{\n        \t\t\t\t\t\t\t\tendAdornment: <InputAdornment position=\"end\">.fandom.com</InputAdornment>,\n        \t\t\t\t\t\t\t}}\n        \t\t\t\t\t\t\tvariant=\"outlined\"\n        \t\t\t\t\t\t/>\n                  </Grid>\n                </Grid>\n              </ExpansionPanelDetails>\n              <Divider />\n              <ExpansionPanelDetails className={ classes.panelDetails }>\n                <Grid container spacing={1}>\n                  <Grid item xm={12} sm={12}>\n                    <ToggleButtonGroup\n                      hidden={ false }\n                      size=\"small\"\n                      value={ this.state.fandom.invocation.query }\n                      exclusive\n                      onChange={ this.handleFandomIndicator }\n                      aria-label=\"indicator selector\"\n                    >\n                      <ToggleButton value=\"[[ ]]\" aria-label=\"double square bracket\">\n                        {\"[[ ]]\"}\n                      </ToggleButton>\n                      <ToggleButton value=\"{{ }}\" aria-label=\"double curly brackets\">\n                        {\"{{ }}\"}\n                      </ToggleButton>\n                      <ToggleButton value=\"< >\" aria-label=\"right aligned\">\n                        {\"< >\"}\n                      </ToggleButton>\n                    </ToggleButtonGroup>\n                  </Grid>\n                  <Grid item xm={12} sm={12}>\n                    <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\n                      query indicator - an example invocation:\n                    </Typography>\n                    <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\n                       <code>\n                        { this.state.fandom.invocation.symbol + this.state.fandom.invocation.term }\n                        { this.state.fandom.invocation.query.replace(\" \", \"search-term\") }\n                       </code>\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n\n\n          <ExpansionPanel\n            expanded={ this.state.translate.isEnabled }\n            disabled={ !this.state.translate.isAvailable }\n            className={ classes.panelMain }\n          >\n            <ExpansionPanelSummary\n              className={ classes.panelSummary }\n              aria-controls=\"translation-content\"\n              id=\"translation-header\"\n            >\n              <FormControlLabel\n                aria-label=\"Acknowledge\"\n                className={ classes.heading }\n                onClick={ this.handleTranslateSwitchToggle }\n                onFocus={ this.handleTranslateSwitchToggle }\n                control={ <Switch checked={ this.state.translate.isEnabled } size=\"small\" /> }\n                label=\"translation\"\n              />\n              <Typography className={ classes.secondaryHeading }>\n                Translate the parent post or comment to the target language.\n              </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={ classes.panelDetails }>\n              <Grid container spacing={3}>\n                <Grid item xs={12} sm={6}>\n        \t\t\t\t\t<Typography variant=\"caption\">no inputs for this service</Typography>\n        \t\t\t\t</Grid>\n              </Grid>\n            </ExpansionPanelDetails>\n            <Divider />\n            <ExpansionPanelDetails className={ classes.panelDetails }>\n              <Grid container spacing={1}>\n                <Grid item xm={12} sm={12}>\n                  <ToggleButtonGroup\n                    hidden={ false }\n                    size=\"small\"\n                    value={ this.state.translate.invocation.query }\n                    exclusive\n                    onChange={ this.handleTranslateIndicator }\n                    aria-label=\"indicator selector\"\n                  >\n                    <ToggleButton value=\"[[ ]]\" aria-label=\"double square bracket\">\n                      {\"[[ ]]\"}\n                    </ToggleButton>\n                    <ToggleButton value=\"{{ }}\" aria-label=\"double curly brackets\">\n                      {\"{{ }}\"}\n                    </ToggleButton>\n                    <ToggleButton value=\"< >\" aria-label=\"right aligned\">\n                      {\"< >\"}\n                    </ToggleButton>\n                  </ToggleButtonGroup>\n                </Grid>\n                <Grid item xm={12} sm={12}>\n                  <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\n                    query indicator - an example invocation:\n                  </Typography>\n                  <Typography className={ classes.panelCaption } variant=\"caption\" display=\"block\">\n                     <code>\n                      { this.state.translate.invocation.symbol + this.state.translate.invocation.term }\n                      { this.state.translate.invocation.query.replace(\" \", \"search-term\") }\n                     </code>\n                  </Typography>\n                </Grid>\n              </Grid>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n\n          <ExpansionPanel\n            expanded={ this.state.flights.isEnabled }\n            disabled={ !this.state.flights.isAvailable }\n            className={ classes.panelMain }\n          >\n            <ExpansionPanelSummary\n              className={ classes.panelSummary }\n              aria-controls=\"flights-content\"\n              id=\"flights-header\"\n            >\n              <FormControlLabel\n                aria-label=\"Acknowledge\"\n                className={ classes.heading }\n                control={ <Switch checked={ this.state.flights.isEnabled } size=\"small\" /> }\n                label=\"flights\"\n              />\n              <Typography className={ classes.secondaryHeading }>\n                Get flight data.\n              </Typography>\n            </ExpansionPanelSummary>\n          </ExpansionPanel>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(ServicesForm);\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\n\n\nconst styles = (theme) => ({\n  header: {\n    backgroundColor: theme.palette.background.default\n  },\n  disabled: {\n    backgroundColor: theme.palette.text.disabled\n  }\n});\n\nfunction ServiceRow ({ props, name }) {\n\n  const getInputsItem = () => {\n    if (props.inputs !== undefined) {\n      return (Object.entries(props.inputs).map(([k, v]) =>{\n\t\t\t\treturn <li key={k}>{k}: {v.val}</li>;\n\t\t\t}))\n    }\n  }\n\n  const getInvocationItem = () => {\n    if (props.invocation !== undefined) {\n      return (\n        <li>\n          invocation:\n          <code>\n          { \" \" + props.invocation.symbol + props.invocation.term }\n          { props.invocation.query.replace(\" \", \"search-term\") }\n          </code>\n        </li>\n      );\n    }\n  }\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">{ name }</TableCell>\n      <TableCell>\n        <ul>\n          { getInputsItem() }\n          { getInvocationItem() }\n        </ul>\n      </TableCell>\n    </TableRow>\n  )\n}\n\n\nclass BotSummary extends React.Component {\n  constructor(props){\n    super(props);\n    this.botData = props.payload;\n    this.createServiceRow = this.createServiceRow.bind(this);\n  }\n\n  returnDataOrNull () {\n    return this.botData;\n  }\n\n  createServiceRow([serviceName, serviceConfigs]) {\n    if (typeof serviceConfigs == \"object\" && serviceConfigs.isEnabled) {\n      return <ServiceRow key={serviceName} props={serviceConfigs} name={serviceName} />;\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <React.Fragment>\n        <Typography variant=\"h5\" gutterBottom>\n          summary\n        </Typography>\n        <Grid container spacing={2}>\n          <Grid item xs={4} sm={4}>\n            <TableContainer component={Paper}>\n              <Table className={classes.header} aria-label=\"simple table\">\n                <caption>bot data</caption>\n                <TableHead>\n                  <TableRow>\n                    <TableCell><Typography variant=\"h5\">key</Typography></TableCell>\n                    <TableCell align=\"right\"><Typography variant=\"h5\">value</Typography></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">name</TableCell>\n                  <TableCell align=\"right\">{ this.botData[0].nameInput.val }</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">enabled for</TableCell>\n                  <TableCell align=\"right\">subreddits</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell component=\"th\" scope=\"row\">targets</TableCell>\n                  <TableCell align=\"right\">\n                    {this.botData[0].subredditInput.val.join(', ')}\n                  </TableCell>\n                </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item xs={8} sm={8}>\n            <TableContainer component={Paper}>\n              <Table className={classes.header} aria-label=\"simple table\">\n                <caption>services data</caption>\n                <TableHead>\n                  <TableRow>\n                  <TableCell><Typography variant=\"h5\">enabled services</Typography></TableCell>\n                  <TableCell><Typography variant=\"h5\">configurations</Typography></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  { Object.entries(this.botData[1]).map(this.createServiceRow) }\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n}\n\nexport default withStyles(styles)(BotSummary);\n","import React, { useEffect } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport Typography from '@material-ui/core/Typography';\nimport Grow from '@material-ui/core/Grow';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nfunction StatusPanel({ payload }) {\n  const [stage, setStage] = React.useState(0);\n  const [hasError, setHasError] = React.useState(false);\n  const [currentErrorMessage, setErrorMessage] = React.useState(\"oh no! an unknown error has occurred.\");\n  const [makingRequest, setMakingRequest] = React.useState(false);\n\n  const handleLifeCycle = () => {\n    switch(stage) {\n      case 0:\n        setStage(stage + 1);\n        break;\n      case 1:\n        setStage(stage + 1);\n        break;\n      case 2:\n        if (!makingRequest) {\n          setMakingRequest(true);\n          fetch(\"https://us-central1-bots-as-a-service.cloudfunctions.net/create-bot\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload),\n          }).then((response) => {\n              return response.json();\n            })\n            .then((data) => {\n              setStage(stage + 1);\n            })\n        }\n        break;\n      case 3:\n        setStage(stage + 1);\n        break;\n      case 4:\n        setMakingRequest(false);\n        break;\n      default:\n        setErrorMessage(\"oh no! you have somehow escaped our lifecycle through mysterious means. please try again.\");\n        setHasError(true);\n        break;\n    }\n  }\n\n  useEffect(() => {\n    setTimeout(function () {handleLifeCycle()}, 1000);\n  })\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 0 && stage !== 4} timeout={500}>\n          <LinearProgress />\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 0} timeout={500}>\n          <Alert severity=\"info\">we're bringing your bot to life. wow!</Alert>\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 1} timeout={500} >\n          <Alert severity=\"warning\">gathering extra nuts and bolts...</Alert>\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 2} timeout={500} >\n          <Alert severity=\"warning\">bribing our bot-maker bots...</Alert>\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 3} timeout={500} >\n          <Alert severity=\"warning\">cutting the umbilical cable...</Alert>\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={stage >= 4} timeout={500} >\n          <Alert severity=\"success\"\n          action={\n            <Button color=\"inherit\" size=\"small\" href=\"#/bots\">\n              GO SEE\n            </Button>\n          }\n          >congratulations, it's a bot! all done. </Alert>\n        </Grow>\n      </Grid>\n      <Grid item xs={12} sm={12}>\n        <Grow in={hasError} timeout={500} >\n          <Alert severity=\"error\">{currentErrorMessage}</Alert>\n        </Grow>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default function FinishedWorkflow({ payload }) {\n  const transformData = () => {\n    const data = payload;\n    const botName = data[0].nameInput.val;\n    let newData = {\n      name: botName,\n      auth: {\n        username: \"testing_dummy\",\n        password: \"leo030811\",\n        user_agent: \"baas/1.0\",\n        client_id: null,\n        client_secret: null,\n      },\n      services: [],\n      status: {\n        online: false,\n      },\n      subreddits: data[0].subredditInput.val,\n      version_info: {\n        description: \"A cool bot!\",\n        name: data[0].nameInput.val,\n        version: \"1.0\",\n      }\n    }\n\n    Object.entries(data[1]).map(([serviceName, serviceConfig]) => {\n      if (typeof serviceConfig == \"object\" && serviceConfig.isEnabled) {\n        let params = {};\n        switch (serviceName) {\n          case \"fandom\":\n            params.url = `https://${serviceConfig.inputs.fandom_name.val}.fandom.com/`\n            break;\n          case \"translate\":\n            params.default_language = \"english\";\n            break;\n          default:\n            break;\n        }\n\n        let thisServiceData = {\n          service_name: serviceName,\n          invocation: serviceConfig.invocation,\n          language: \"english\",\n          params: params,\n        }\n        newData.services.push(thisServiceData);\n      }\n      return null\n    });\n\n    let newPayload = {\n      \"bot-name\": botName,\n      \"config\": newData,\n    }\n    return newPayload;\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        creating your bot\n      </Typography>\n      <Typography variant=\"subtitle1\">\n        <StatusPanel payload={ transformData() } />\n      </Typography>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport BotDetailsForm from './BotDetailsForm';\nimport ServicesForm from './ServicesForm';\nimport BotSummary from './BotSummary';\nimport FinishedWorkflow from './FinishedWorkflow';\n\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 1000,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst steps = ['details', 'services', 'review', 'finished'];\n\nfunction getStepContent(step, ref, payload) {\n  switch (step) {\n    case 0:\n      return <BotDetailsForm payload={payload} ref={ref} />;\n    case 1:\n      return <ServicesForm payload={payload} ref={ref} />;\n    case 2:\n      return <BotSummary payload={payload} ref={ref} />;\n    case 3:\n      return <FinishedWorkflow payload={payload} />;\n    default:\n      throw new Error('Unknown step');\n  }\n}\n\nexport default function CreationPortal() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [stepData, setStepData] = React.useState({});\n  let ref = React.createRef();\n\n  const handleNext = () => {\n    let thisStepData = ref.current.returnDataOrNull()\n\n    if (thisStepData !== null) {\n      stepData[activeStep] = thisStepData;\n      const nextStep = activeStep + 1;\n      // Hacky alarm! If the next is the summary page, send\n      // the entire package.\n      if (nextStep >= 2) {\n        let allData = Object.assign({}, stepData);\n        stepData[nextStep] = allData;\n      }\n      setStepData(stepData);\n      setActiveStep(activeStep + 1);\n    }\n    else {\n      console.log(\"didn't get any data; forcing stop.\");\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  document.title = 'bots-as-a-service: create';\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            create-a-bot\n          </Typography>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map(label => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n             <React.Fragment>\n                {getStepContent(activeStep, ref, stepData[activeStep])}\n                <div className={classes.buttons}>\n                  {activeStep !== 0 && activeStep !== steps.length - 1 && (\n                    <Button onClick={handleBack} className={classes.button}>\n                      Back\n                    </Button>\n                  )}\n                  {activeStep !== steps.length - 1 && (\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      onClick={handleNext}\n                      className={classes.button}\n                    >\n                      {activeStep === 2 ? 'submit' : 'next'}\n                    </Button>\n                  )}\n                </div>\n              </React.Fragment>\n          </React.Fragment>\n        </Paper>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n    width: '100%',\r\n  },\r\n\tenabledBotSummary: {\r\n\t\tbackgroundColor: theme.palette.success.dark,\r\n\t},\r\n\theader: {\r\n    backgroundColor: theme.palette.background.default\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n\t\tcolor: theme.palette.text.primary,\r\n    flexGrow: 1,\r\n\t\tverticalAlign: 'baseline',\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n    justifyContent: \"flex-end\",\r\n\t\tmarginRight: \"1rem\",\r\n  },\r\n  startButton: {\r\n  \tcolor: theme.palette.success.light,\r\n  },\r\n  pauseButton: {\r\n  \tcolor: theme.palette.primary.light,\r\n  },\r\n\tdeleteButton: {\r\n  \tcolor: theme.palette.error.dark,\r\n  },\r\n}));\r\n\r\nfunction ServiceRow ({ name, payload }) {\r\n\r\n  const getInputsItem = () => {\r\n    if (typeof payload.params === \"object\") {\r\n\t\t\treturn (Object.entries(payload.params).map(([k, v]) =>{\r\n\t\t\t\treturn <li key={k}>{k}: {v}</li>;\r\n\t\t\t}))\r\n    }\r\n  }\r\n\r\n  const getInvocationItem = () => {\r\n    if (payload.invocation !== undefined) {\r\n      return (\r\n        <li>\r\n          invocation:\r\n          <code>\r\n          { \" \" + payload.invocation.symbol + payload.invocation.term }\r\n          { payload.invocation.query.replace(\" \", \"search-term\") }\r\n          </code>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <TableRow>\r\n      <TableCell component=\"th\" scope=\"row\">{ name }</TableCell>\r\n      <TableCell>\r\n        <ul>\r\n          { getInputsItem() }\r\n          { getInvocationItem() }\r\n        </ul>\r\n      </TableCell>\r\n    </TableRow>\r\n  )\r\n}\r\n\r\nexport default function ViewBotsPanel({payload}){\r\n\tconst classes = useStyles();\r\n\tconst isOnline = !payload.status.online;\r\n\r\n\tconst enabledStatusLabel = isOnline ? 'disabled' : 'active';\r\n\r\n\tconst isPlayButtonDisabled = !isOnline;\r\n\tconst isPauseButtonDisabled = !isPlayButtonDisabled;\r\n\r\n\tconst createServiceRow = (serviceConfigs) => {\r\n\t\tconst serviceName = serviceConfigs.service_name\r\n    return <ServiceRow key={serviceName} payload={serviceConfigs} name={serviceName} />;\r\n\r\n  }\r\n\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n\t\t\t\tclassName={ isOnline ? null : classes.enabledBotSummary  }\r\n        aria-controls=\"panel1a-content\"\r\n        id={ payload.name + \"-header\" }\r\n      >\r\n        <Typography className={classes.heading}>{ payload.name }</Typography>\r\n        <Typography className={classes.secondaryHeading}>{enabledStatusLabel}</Typography>\r\n\t\t\t\t<Divider orientation=\"vertical\" flexItem />\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n\t\t\t<Grid container spacing={2}>\r\n\t\t\t\t<Grid item xs={4} sm={4}>\r\n\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t<Table className={classes.header} aria-label=\"simple table\">\r\n\t\t\t\t\t\t\t<caption>bot data</caption>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t\t<TableCell><Typography variant=\"h6\">key</Typography></TableCell>\r\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\"><Typography variant=\"h6\">value</Typography></TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">name</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">{ payload.name }</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">enabled for</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">subreddits</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">targets</TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell align=\"right\">\r\n\t\t\t\t\t\t\t\t\t{payload.subreddits.join(', ')}\r\n\t\t\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid item xs={8} sm={8}>\r\n\t\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t\t\t<Table className={classes.header} aria-label=\"simple table\">\r\n\t\t\t\t\t\t\t<caption>services data</caption>\r\n\t\t\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t\t\t<TableCell><Typography variant=\"h6\">enabled services</Typography></TableCell>\r\n\t\t\t\t\t\t\t\t<TableCell><Typography variant=\"h6\">configurations</Typography></TableCell>\r\n\t\t\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t\t\t\t{ payload.services.map(createServiceRow) }\r\n\t\t\t\t\t\t\t</TableBody>\r\n\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t</TableContainer>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n      </ExpansionPanelDetails>\r\n      <Divider />\r\n      <ExpansionPanelActions>\r\n      \t<Button className={classes.startButton} startIcon={<PlayArrowIcon />} disabled={isPlayButtonDisabled}>\r\n\t        Start\r\n\t      </Button>\r\n\t      <Button className={classes.pauseButton} startIcon={<PauseIcon />} disabled={isPauseButtonDisabled}>\r\n\t        Disable\r\n\t      </Button>\r\n        <Button className={classes.deleteButton} startIcon={<DeleteIcon />}>\r\n\t        Delete\r\n\t      </Button>\r\n      </ExpansionPanelActions>\r\n    </ExpansionPanel>\r\n\t);\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\n\r\nimport ViewBotsPanel from './support/ViewBotsPanel';\r\n\r\n\r\nexport default function ViewBotsPortal(){\r\n\tuseEffect(() => {\r\n\t\tdocument.title = 'bots-as-a-service: bots';\r\n\t\tif (!loadedIn) {\r\n\t\t\tif (!isLoading) {\r\n\t\t\t\tsetIsLoading(true);\r\n\t\t\t\tfetch(\"https://us-central1-bots-as-a-service.cloudfunctions.net/get-bots\")\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\treturn response.json();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tsetBotsList(data.map((payload) =>\r\n\t\t\t\t\t\t\t<ViewBotsPanel key={payload.name} payload={payload} />\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t\tsetLoadedIn(true);\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t// setBotsList(fakeResponse.map((payload) =>\r\n\t\t\t \t// \t<ViewBotsPanel key={payload.name} payload={payload} />\r\n\t\t\t \t// ))\r\n\t\t\t\t// setLoadedIn(true);\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\tconst [loadedIn, setLoadedIn] = React.useState(false);\r\n\t// Flag to ensure only one thread starts making network requests + loading data.\r\n\tconst [isLoading, setIsLoading] = React.useState(false);\r\n\tconst [botsList, setBotsList] = React.useState([]);\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Container>\r\n\t\t\t\t<Typography variant=\"h3\" gutterBottom>\r\n\t\t\t\t\tbots\r\n\t\t\t\t</Typography>\r\n\t\t\t\t{\tloadedIn ? botsList : (\r\n\t\t\t\t\t<Container>\r\n\t\t\t\t\t\t<ExpansionPanel>\r\n\t\t\t\t\t\t\t<ExpansionPanelSummary>\r\n\t\t\t\t\t\t\t\t<Skeleton animation=\"wave\" height={10} width=\"30%\" />\r\n\t\t\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t\t</ExpansionPanel>\r\n\t\t\t\t\t\t<ExpansionPanel>\r\n\t\t\t\t\t\t\t<ExpansionPanelSummary>\r\n\t\t\t\t\t\t\t\t<Skeleton animation=\"wave\" height={10} width=\"30%\" />\r\n\t\t\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t\t</ExpansionPanel>\r\n\t\t\t\t\t\t<ExpansionPanel>\r\n\t\t\t\t\t\t\t<ExpansionPanelSummary>\r\n\t\t\t\t\t\t\t\t<Skeleton animation=\"wave\" height={10} width=\"30%\" />\r\n\t\t\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t\t</ExpansionPanel>\r\n\t\t\t\t\t\t<ExpansionPanel>\r\n\t\t\t\t\t\t\t<ExpansionPanelSummary>\r\n\t\t\t\t\t\t\t\t<Skeleton animation=\"wave\" height={10} width=\"30%\" />\r\n\t\t\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t\t</ExpansionPanel>\r\n\t\t\t\t\t\t<ExpansionPanel>\r\n\t\t\t\t\t\t\t<ExpansionPanelSummary>\r\n\t\t\t\t\t\t\t\t<Skeleton animation=\"wave\" height={10} width=\"30%\" />\r\n\t\t\t\t\t\t\t</ExpansionPanelSummary>\r\n\t\t\t\t\t\t</ExpansionPanel>\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t)}\r\n\t\t\t</Container>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\n// STUB\r\nconst fakeResponse = [\r\n\t{\r\n\t  \"name\": \"example-on\",\r\n\t  \"auth\": {\r\n\t      \"client_id\": \"B-pVZ2UJucTJ7Q\",\r\n\t      \"client_secret\": \"bS9f3mP6oeeMUy7eWkksohwoazs\",\r\n\t      \"password\": \"leo030811\",\r\n\t      \"user_agent\": \"bot for testing other bots\",\r\n\t      \"username\": \"testing_dummy\"\r\n\t  },\r\n\t  \"services\": [\r\n\t    {\r\n\t      \"language\": \"english\",\r\n\t      \"invocation\": {\r\n\t        \"symbol\": \"!\",\r\n\t        \"term\": \"fandom\",\r\n\t        \"query\": \"[[ ]]\"\r\n\t      },\r\n\t      \"params\": {\r\n\t        \"url\": \"https://naruto.fandom.com/\"\r\n\t      },\r\n\t      \"service_name\": \"fandom\"\r\n\t    },\r\n\t    {\r\n\t      \"language\": \"english\",\r\n\t      \"invocation\": {\r\n\t        \"symbol\": \"!\",\r\n\t        \"term\": \"translate\",\r\n\t        \"query\": \"[[ ]]\"\r\n\t      },\r\n\t      \"params\": {\r\n\t        \"default_language\": \"english\"\r\n\t      },\r\n\t      \"service_name\": \"translate\"\r\n\t    }\r\n\t  ],\r\n\t  \"status\": {\r\n\t    \"online\": true\r\n\t  },\r\n\t  \"subreddits\": [\r\n\t    \"botsasaservice_test\"\r\n\t  ],\r\n\t  \"version_info\": {\r\n\t    \"description\": \"A bot to be a test account for our bot platform\",\r\n\t    \"name\": \"BaaS testing bot\",\r\n\t    \"version\": \"v1.0\"\r\n\t  }\r\n\t},\r\n\t{\r\n\t  \"name\": \"example-off\",\r\n\t  \"auth\": {\r\n\t      \"client_id\": \"B-pVZ2UJucTJ7Q\",\r\n\t      \"client_secret\": \"bS9f3mP6oeeMUy7eWkksohwoazs\",\r\n\t      \"password\": \"leo030811\",\r\n\t      \"user_agent\": \"bot for testing other bots\",\r\n\t      \"username\": \"testing_dummy\"\r\n\t  },\r\n\t  \"services\": [\r\n\t    {\r\n\t      \"language\": \"english\",\r\n\t      \"invocation\": {\r\n\t        \"symbol\": \"!\",\r\n\t        \"term\": \"fandom\",\r\n\t        \"query\": \"[[ ]]\"\r\n\t      },\r\n\t      \"params\": {\r\n\t        \"url\": \"https://naruto.fandom.com/\"\r\n\t      },\r\n\t      \"service_name\": \"fandom\"\r\n\t    }\r\n\t  ],\r\n\t  \"status\": {\r\n\t    \"online\": false\r\n\t  },\r\n\t  \"subreddits\": [\r\n\t    \"botsasaservice_test\"\r\n\t  ],\r\n\t  \"version_info\": {\r\n\t    \"description\": \"A bot to be a test account for our bot platform\",\r\n\t    \"name\": \"BaaS testing bot\",\r\n\t    \"version\": \"v1.0\"\r\n\t  }\r\n\t}\r\n]\r\n","import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport TopNavigationBar from './global-support/TopNavigationBar';\nimport Attribution from './global-support/Attribution';\nimport CreationPortal from './bot-creation/CreationPortal';\nimport ViewBotsPortal from './view-bots/ViewBotsPortal';\n\nexport default function App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <TopNavigationBar />\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/create\">\n                <Create theme={theme}/>\n              </Route>\n              <Route path=\"/bots\">\n                <Bots theme={theme}/>\n              </Route>\n              <Route path=\"/\">\n                <Redirect to=\"/bots\" />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n        <Attribution />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nfunction Create(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <CreationPortal />\n    </ThemeProvider>\n  );\n}\n\nfunction Bots(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <ViewBotsPortal />\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}