{"version":3,"sources":["global-support/TopNavigationBar.js","global-support/Attribution.js","bot-creation/RedditTypes.js","bot-creation/BotDetailsForm.js","bot-creation/support/ServicePanel.js","bot-creation/ServicesForm.js","bot-creation/Review.js","bot-creation/FinishedWorkflow.js","bot-creation/CreationPortal.js","view-bots/support/ViewBotsPanel.js","view-bots/ViewBotsPortal.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","appBar","position","marginBottom","spacing","title","flexGrow","menuButton","margin","TopNavigationBar","props","classes","stateMaker","activeWindow","botsVariant","botsDisabled","createVariant","createDisabled","bots","variant","disabled","create","initialState","window","location","hash","useState","state","updateState","AppBar","color","className","Toolbar","Typography","noWrap","Button","href","onClick","attribution","marginTop","Attribution","align","root","display","formControl","RedditTypesCheckboxGroup","React","subreddits","livethreads","setState","handleChange","name","event","target","checked","error","filter","v","length","FormControl","required","component","FormLabel","FormGroup","FormControlLabel","control","Checkbox","onChange","value","label","FormHelperText","BotDetailsForm","botData","nameInput","hasError","helperText","typeInput","subredditInput","onNameInputChange","bind","onSubredditInputChange","newValue","newHelperText","test","newState","Object","assign","this","reason","targets","Fragment","gutterBottom","Grid","container","item","xs","sm","TextField","id","fullWidth","InputProps","startAdornment","InputAdornment","Autocomplete","multiple","selectOnFocus","options","renderTags","getTagProps","map","option","index","Chip","renderInput","params","Component","width","heading","fontSize","typography","pxToRem","palette","text","primary","verticalAlign","secondaryHeading","secondary","justifyContent","marginRight","panelMain","backgroundColor","background","default","panelSummary","borderBottom","panelDetails","padding","panelCaption","rightTextAlign","textAlign","ServicePanel","payload","defaultOn","isEnabled","setEnabled","queryIndicator","setQueryIndicator","handleSwitchToggle","stopPropagation","inputsList","inputs","inputField","elem","flavor","inputFields","inputProps","endAdornment","adornments","end","console","log","key","ExpansionPanel","expanded","available","ExpansionPanelSummary","aria-controls","aria-label","onFocus","Switch","size","description","ExpansionPanelDetails","Divider","xm","ToggleButtonGroup","hidden","configurableQuery","exclusive","newIndicator","ToggleButton","replace","ServicesForm","md","serviceDefinitions","meta","validation","type","products","desc","price","addresses","payments","detail","listItem","total","fontWeight","Review","List","disablePadding","product","ListItem","ListItemText","join","direction","payment","FinishedWorkflow","LinearProgress","layout","marginLeft","breakpoints","up","paper","stepper","buttons","button","steps","CreationPortal","activeStep","setActiveStep","ref","createRef","stepData","document","CssBaseline","Paper","Stepper","Step","StepLabel","step","Error","getStepContent","thisStepData","current","returnDataOrNull","startButton","success","light","pauseButton","deleteButton","dark","ViewBotsPanel","botName","isOnline","status","online","enabledStatusLabel","isPlayButtonDisabled","isPauseButtonDisabled","expandIcon","orientation","flexItem","ExpansionPanelActions","startIcon","ViewBotsPortal","botsList","fakeResponse","Container","Create","ThemeProvider","Bots","Boolean","hostname","match","ReactDOM","render","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","path","to","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.09941d8c.chunk.js","sourcesContent":["import React, { useState }from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: 'relative',\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n  \tmargin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function TopNavigationBar(props) {\r\n\tconst classes = useStyles();\r\n\r\n  function stateMaker(activeWindow) {\r\n    let botsVariant = 'text';\r\n    let botsDisabled = false;\r\n    let createVariant = 'text';\r\n    let createDisabled = false;\r\n\r\n    // This is the initial state upon render\r\n    switch (activeWindow) {\r\n      case '#/bots':\r\n        botsVariant = 'outlined';\r\n        botsDisabled = true;\r\n        break;\r\n      case '#/create':\r\n        createVariant = 'outlined';\r\n        createDisabled = true;\r\n        break;\r\n      default: break;\r\n    }\r\n\r\n    const createdState = {\r\n      bots: {\r\n        variant: botsVariant,\r\n        disabled: botsDisabled,\r\n      },\r\n      create: {\r\n        variant: createVariant,\r\n        disabled: createDisabled,\r\n      }\r\n    }\r\n    return createdState;\r\n  }\r\n\r\n  const initialState = stateMaker(window.location.hash);\r\n  const [state, updateState] = useState(initialState);\r\n\r\n\treturn (\r\n\t\t<AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n\t    <Toolbar>\r\n\t      <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n\t        bots-as-a-service\r\n\t      </Typography>\r\n\r\n\t      <Button\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          href=\"#/bots\"\r\n          variant={ state.bots.variant }\r\n          disabled={ state.bots.disabled }\r\n          onClick={ () => updateState(stateMaker(\"#/bots\")) }\r\n        >\r\n          bots\r\n        </Button>\r\n\t      <Button\r\n           className={classes.menuButton}\r\n           color=\"inherit\"\r\n           href=\"#/create\"\r\n           variant={ state.create.variant }\r\n           disabled={ state.create.disabled }\r\n           onClick={ () => updateState(stateMaker(\"#/create\")) }\r\n        >\r\n           create\r\n         </Button>\r\n\t    </Toolbar>\r\n\t  </AppBar>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  attribution: {\r\n    marginTop: theme.spacing(5),\r\n  },\r\n}));\r\n\r\nexport default function Attribution() {\r\n\tconst classes = useStyles();\r\n\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\" className={classes.attribution}>\r\n      created and maintained for csci-5828, team 10\r\n    </Typography>\r\n  );\r\n}\r\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nexport default function RedditTypesCheckboxGroup() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    subreddits: true,\n    livethreads: false,\n  });\n\n  const handleChange = name => event => {\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  const { subreddits, livethreads } = state;\n  const error = [subreddits, livethreads].filter(v => v).length === 0;\n\n  // For now, we're hardcoding these to true/false and disabling inputs entirely.\n  // Current project scope is going to be only subreddits.\n  return (\n    <div className={classes.root}>\n      <FormControl required error={error} component=\"fieldset\" className={classes.formControl}>\n        <FormLabel component=\"legend\">triggers</FormLabel>\n        <FormGroup>\n          <FormControlLabel\n            control={<Checkbox checked={subreddits} onChange={handleChange('subreddits')} value=\"subreddits\" />}\n            label=\"subreddits\"\n            disabled\n          />\n          <FormControlLabel\n            control={<Checkbox checked={livethreads} onChange={handleChange('livethreads')} value=\"livethreads\" />}\n            label=\"livethreads (not yet implemented)\"\n            disabled\n          />\n        </FormGroup>\n        <FormHelperText>what to trigger your bot on. must check at least one option.</FormHelperText>\n      </FormControl>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport RedditTypesCheckboxGroup from './RedditTypes.js';\n\nexport default class BotDetailsForm extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      botData: {},\n      nameInput: {\n        hasError: false,\n        helperText: \"the name of your bot.\",\n      },\n      typeInput: {\n        hasError: false,\n      },\n      subredditInput: {\n        hasError: true, // Stupid workaround -- just set this to having an error initially to prevent user\n                        // from immediately clicking NEXT\n        helperText: \"one or more subreddits to operate in.\"\n      }\n    }\n\n    this.onNameInputChange = this.onNameInputChange.bind(this);\n    this.onSubredditInputChange = this.onSubredditInputChange.bind(this);\n  }\n\n  onNameInputChange(event) {\n    const newValue = event.target.value;\n    let forbiddenCharacters = /[^\\d\\w-]/;\n    let hasError = false;\n    let newHelperText = \"the name of your bot.\";\n    if (newValue.length > 64){\n      hasError = true;\n      newHelperText = \"your name is too long (must be < 64 chars).\";\n    } else if (forbiddenCharacters.test(newValue)) {\n      hasError = true;\n      newHelperText = \"you can only use alphanumeric characters, dash (-), or underscope (_).\";\n    } else {\n      hasError = false;\n      newHelperText = \"the name of your bot.\";\n    }\n\n    let newState = Object.assign({}, this.state);\n    if (!hasError) {\n      newState.botData.name = newValue;\n    }\n    else {\n      newState.botData.name = null;\n    }\n    newState.nameInput = {\n      hasError: hasError,\n      helperText: newHelperText,\n    }\n    this.setState(newState);\n  }\n\n  onSubredditInputChange(event, value, reason) {\n    let newState = Object.assign({}, this.state);\n    let hasError = value.length === 0;\n    newState.botData.targets = hasError ? null : value;\n    newState.subredditInput.hasError = hasError\n    this.setState(newState);\n  }\n\n  returnDataOrNull () {\n    // This will give us validation.\n    // Return null if there are any errors.\n    let anyHasError = this.state.nameInput.hasError || this.state.typeInput.hasError || this.state.subredditInput.hasError\n    if (anyHasError) {\n      return null;\n    }\n    else {\n      let payload = this.state.botData;\n      return payload;\n    }\n  }\n\n  // Probably want to look at https://www.reddit.com/dev/api/#GET_api_subreddit_autocomplete_v2\n  render () {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          bot definition\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={12}>\n            <TextField\n              required\n              id=\"botName\"\n              name=\"botName\"\n              label=\"bot name\"\n              fullWidth\n              variant=\"outlined\"\n              error={this.state.nameInput.hasError}\n              helperText={this.state.nameInput.helperText}\n              onChange={this.onNameInputChange}\n              InputProps={{\n                startAdornment: <InputAdornment position=\"start\">/u/</InputAdornment>,\n              }}\n            />\n          </Grid>\n          <RedditTypesCheckboxGroup />\n          <Grid item xs={12}>\n            <Autocomplete\n              required\n              multiple\n              selectOnFocus\n              onChange={this.onSubredditInputChange}\n              options={subreddits}\n              renderTags={(value, getTagProps) =>\n                value.map((option, index) => (\n                  <Chip variant=\"outlined\" label={\"/r/\" + option} {...getTagProps({ index })} />\n                ))\n              }\n              renderInput={params => (\n                <TextField {...params} variant=\"outlined\" label=\"subreddits\" error={this.state.subredditInput.hasError} />\n              )}\n            />\n            <Typography variant=\"caption\" display=\"block\" color=\"textSecondary\" gutterBottom>\n              {this.state.subredditInput.helperText}\n            </Typography>\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\n// STUB DATA\nconst subreddits = [\n  \"test\",\n  \"test1\",\n  \"test2\",\n  \"test3\"\n]\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Divider from '@material-ui/core/Divider';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles(theme => ({\n\troot: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(16),\n\t\tcolor: theme.palette.text.primary,\n    flexGrow: 1,\n\t\tverticalAlign: 'baseline',\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(16),\n    color: theme.palette.text.secondary,\n    justifyContent: \"flex-end\",\n\t\tmarginRight: \"1rem\",\n  },\n  panelMain: {\n    backgroundColor: theme.palette.background.default,\n  },\n  panelSummary: {\n    borderBottom: '2px solid rgba(0, 0, 0, .125)',\n    marginBottom: -1,\n  },\n  panelDetails: {\n    padding: theme.spacing(2),\n  },\n  panelCaption: {\n    color: theme.palette.text.secondary,\n  },\n  rightTextAlign: {\n    textAlign: \"right\",\n  }\n}));\n\n\nexport default function ServicePanel({ payload }) {\n  const classes = useStyles();\n\n  const [isEnabled, setEnabled] = React.useState(payload.defaultOn);\n\n  const [queryIndicator, setQueryIndicator] = React.useState('[[ ]]');\n\n  const handleIndicator = (event, newIndicator) => {\n    if (newIndicator !== null) {\n      setQueryIndicator(newIndicator);\n    }\n  };\n\n  const handleSwitchToggle = (event) => {\n    event.stopPropagation();\n    // Kind of hacky? Need to control state for multiple all components.\n    // Pretty much ignore the actual state of the state/expand\n    // And rely only on the enabled/disabled state to control all sub-components\n    setEnabled(!isEnabled);\n\n  }\n\n  const inputsList = payload.inputs.map((inputField) => {\n    let elem = null;\n    switch (inputField.flavor) {\n      case 'text':\n        elem = <TextField\n          className={ classes.inputFields }\n          label={ inputField.name }\n          helperText={ inputField.helperText }\n          color=\"primary\"\n          required={ inputField.required }\n          inputProps={{\n            className: classes.rightTextAlign,\n            align: \"right\",\n          }}\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">{ inputField.adornments.end }</InputAdornment>,\n          }}\n          variant=\"outlined\"\n        />;\n        break;\n      default:\n        console.log(`Could not process input field flavor: ${inputField.flavor}`)\n        break;\n    }\n    return <Grid key={ inputField.name } item xs={12} sm={6}>{elem}</Grid>;\n  })\n\n  return (\n    <ExpansionPanel\n      expanded={ isEnabled }\n      disabled={ !payload.available }\n      className={ classes.panelMain }\n    >\n      <ExpansionPanelSummary\n        className={ classes.panelSummary }\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <FormControlLabel\n          aria-label=\"Acknowledge\"\n          className={ classes.heading }\n          onClick={ handleSwitchToggle }\n          onFocus={ handleSwitchToggle }\n          control={ <Switch checked={ isEnabled } size=\"small\" /> }\n          label={ payload.name }\n        />\n        <Typography className={ classes.secondaryHeading }>\n          { payload.description }\n        </Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails className={ classes.panelDetails }>\n        <Grid container spacing={3}>\n        { inputsList }\n        </Grid>\n      </ExpansionPanelDetails>\n      <Divider />\n      <ExpansionPanelDetails className={ classes.panelDetails }>\n        <Grid container spacing={1}>\n          <Grid item xm={12} sm={12}>\n            <ToggleButtonGroup\n              hidden={!payload.configurableQuery}\n              value={ queryIndicator }\n              exclusive\n              onChange={ handleIndicator }\n              aria-label=\"indicator selector\"\n            >\n              <ToggleButton value=\"[[ ]]\" aria-label=\"double square bracket\">\n                {\"[[ ]]\"}\n              </ToggleButton>\n              <ToggleButton value=\"{{ }}\" aria-label=\"double curly brackets\">\n                {\"{{ }}\"}\n              </ToggleButton>\n              <ToggleButton value=\"< >\" aria-label=\"right aligned\">\n                {\"< >\"}\n              </ToggleButton>\n            </ToggleButtonGroup>\n          </Grid>\n          <Grid item xm={12} sm={12}>\n            <Typography className={classes.panelCaption} variant=\"caption\" display=\"block\">\n              query indicator - an example invocation: <code>!fandom { queryIndicator.replace(\" \", \"search-term\") }</code>\n            </Typography>\n          </Grid>\n        </Grid>\n\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  )\n}\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport ServicePanel from './support/ServicePanel';\n\n\nexport default class ServicesForm extends React.Component {\n  returnDataOrNull () {\n    // This will give us validation.\n    // Return null if there are any errors.\n    return null;\n  }\n\n  render () {\n    return (\n      <React.Fragment>\n        <Typography variant=\"h6\" gutterBottom>\n          services\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={12}>\n            {\n              serviceDefinitions.map((payload) => <ServicePanel key={payload.name} payload={payload} />)\n            }\n          </Grid>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\n\nconst serviceDefinitions = [\n  {\n    name: \"fandom search\",\n    available: true,\n    defaultOn: true,\n    description: \"Search the input fandom and return the top results.\",\n    configurableQuery: true,\n    inputs: [\n      {\n        name: \"name\",\n        helperText: \"the fandom subdomain, i.e.: [name].fandom.com\",\n        adornments: {\n          end: \".fandom.com\",\n        },\n        flavor: \"text\",\n        required: true,\n        default: null,\n        meta:{\n          validation: {\n            type: \"request\",\n            target: \"https://INPUT_TERM.fandom.com/api/v1/Mercury/WikiVariables\"\n          }\n        }\n      }\n    ]\n  },\n  {\n    name: \"flight lookup\",\n    available: false,\n    defaultOn: false,\n    description: \"Search for flight information.\",\n    configurableQuery: false,\n    inputs: []\n  }\n]\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Grid from '@material-ui/core/Grid';\n\nconst products = [\n  { name: 'Product 1', desc: 'A nice thing', price: '$9.99' },\n  { name: 'Product 2', desc: 'Another thing', price: '$3.45' },\n  { name: 'Product 3', desc: 'Something else', price: '$6.51' },\n  { name: 'Product 4', desc: 'Best thing of all', price: '$14.11' },\n  { name: 'Shipping', desc: '', price: 'Free' },\n];\nconst addresses = ['1 Material-UI Drive', 'Reactville', 'Anytown', '99999', 'USA'];\nconst payments = [\n  { name: 'Card type', detail: 'Visa' },\n  { name: 'Card holder', detail: 'Mr John Smith' },\n  { name: 'Card number', detail: 'xxxx-xxxx-xxxx-1234' },\n  { name: 'Expiry date', detail: '04/2024' },\n];\n\nconst useStyles = makeStyles(theme => ({\n  listItem: {\n    padding: theme.spacing(1, 0),\n  },\n  total: {\n    fontWeight: 700,\n  },\n  title: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nexport default function Review() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\" gutterBottom>\n        summary\n      </Typography>\n      <List disablePadding>\n        {products.map(product => (\n          <ListItem className={classes.listItem} key={product.name}>\n            <ListItemText primary={product.name} secondary={product.desc} />\n            <Typography variant=\"body2\">{product.price}</Typography>\n          </ListItem>\n        ))}\n        <ListItem className={classes.listItem}>\n          <ListItemText primary=\"Total\" />\n          <Typography variant=\"subtitle1\" className={classes.total}>\n            $34.06\n          </Typography>\n        </ListItem>\n      </List>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6}>\n          <Typography variant=\"h6\" gutterBottom className={classes.title}>\n            Shipping\n          </Typography>\n          <Typography gutterBottom>John Smith</Typography>\n          <Typography gutterBottom>{addresses.join(', ')}</Typography>\n        </Grid>\n        <Grid item container direction=\"column\" xs={12} sm={6}>\n          <Typography variant=\"h6\" gutterBottom className={classes.title}>\n            Payment details\n          </Typography>\n          <Grid container>\n            {payments.map(payment => (\n              <React.Fragment key={payment.name}>\n                <Grid item xs={6}>\n                  <Typography gutterBottom>{payment.name}</Typography>\n                </Grid>\n                <Grid item xs={6}>\n                  <Typography gutterBottom>{payment.detail}</Typography>\n                </Grid>\n              </React.Fragment>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function FinishedWorkflow() {\n  // eslint-disable-next-line\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        creating your bot!\n      </Typography>\n      <Typography variant=\"subtitle1\">\n        <LinearProgress />\n        we're bringing your bot to life. wow!\n      </Typography>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport BotDetailsForm from './BotDetailsForm';\nimport ServicesForm from './ServicesForm';\nimport Review from './Review';\nimport FinishedWorkflow from './FinishedWorkflow';\n\nconst useStyles = makeStyles(theme => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 1000,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst steps = ['details', 'services', 'review'];\n\nfunction getStepContent(step, ref, payload) {\n  switch (step) {\n    case 0:\n      return <BotDetailsForm payload={payload} ref={ref} />;\n    case 1:\n      return <ServicesForm payload={payload} ref={ref} />;\n    case 2:\n      return <Review payload={payload} ref={ref} />;\n    default:\n      throw new Error('Unknown step');\n  }\n}\n\nexport default function CreationPortal() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0); \n  let ref = React.createRef();\n\n  let stepData = {};\n\n  const handleNext = () => {\n    let thisStepData = ref.current.returnDataOrNull()\n\n    if (thisStepData !== null) {\n      stepData[activeStep] = thisStepData;\n      setActiveStep(activeStep + 1);\n    }\n    else {\n      console.log(\"didn't get any data; forcing stop.\");\n    }\n  };\n\n  const handleBack = () => {\n    setActiveStep(activeStep - 1);\n  };\n\n  document.title = 'bots-as-a-service: create';\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <main className={classes.layout}>\n        <Paper className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            create-a-bot\n          </Typography>\n          <Stepper activeStep={activeStep} className={classes.stepper}>\n            {steps.map(label => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n          <React.Fragment>\n            {activeStep === steps.length ? (\n              <FinishedWorkflow />\n            ) : (\n              <React.Fragment>\n                {getStepContent(activeStep, ref, stepData[activeStep])}\n                <div className={classes.buttons}>\n                  {activeStep !== 0 && (\n                    <Button onClick={handleBack} className={classes.button}>\n                      Back\n                    </Button>\n                  )}\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleNext}\n                    className={classes.button}\n                  >\n                    {activeStep === steps.length - 1 ? 'submit' : 'next'}\n                  </Button>\n                </div>\n              </React.Fragment>\n            )}\n          </React.Fragment>\n        </Paper>\n      </main>\n    </React.Fragment>\n  );\n}\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelActions from '@material-ui/core/ExpansionPanelActions';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(16),\r\n\t\tcolor: theme.palette.text.primary,\r\n    flexGrow: 1,\r\n\t\tverticalAlign: 'baseline',\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n    justifyContent: \"flex-end\",\r\n\t\tmarginRight: \"1rem\",\r\n  },\r\n  startButton: {\r\n  \tcolor: theme.palette.success.light,\r\n  },\r\n  pauseButton: {\r\n  \tcolor: theme.palette.primary.light,\r\n  },\r\n\tdeleteButton: {\r\n  \tcolor: theme.palette.error.dark,\r\n  },\r\n}));\r\n\r\nexport default function ViewBotsPanel(props){\r\n\tconst classes = useStyles();\r\n\tconst botName = props.payload.name;\r\n\tconst isOnline = props.payload.status.online;\r\n\r\n\tconst enabledStatusLabel = isOnline ? 'disabled' : 'active';\r\n\r\n\tconst isPlayButtonDisabled = !isOnline;\r\n\tconst isPauseButtonDisabled = !isPlayButtonDisabled;\r\n\r\n\treturn (\r\n\t\t<ExpansionPanel>\r\n      <ExpansionPanelSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id={botName + \"-header\"}\r\n      >\r\n        <Typography className={classes.heading}>{botName}</Typography>\r\n        <Typography className={classes.secondaryHeading}>{enabledStatusLabel}</Typography>\r\n\t\t\t\t<Divider orientation=\"vertical\" flexItem />\r\n      </ExpansionPanelSummary>\r\n      <ExpansionPanelDetails>\r\n        <Typography>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\r\n          sit amet blandit leo lobortis eget.\r\n        </Typography>\r\n      </ExpansionPanelDetails>\r\n      <Divider />\r\n      <ExpansionPanelActions>\r\n      \t<Button className={classes.startButton} startIcon={<PlayArrowIcon />} disabled={isPlayButtonDisabled}>\r\n\t        Start\r\n\t      </Button>\r\n\t      <Button className={classes.pauseButton} startIcon={<PauseIcon />} disabled={isPauseButtonDisabled}>\r\n\t        Disable\r\n\t      </Button>\r\n        <Button className={classes.deleteButton} startIcon={<DeleteIcon />}>\r\n\t        Delete\r\n\t      </Button>\r\n      </ExpansionPanelActions>\r\n    </ExpansionPanel>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport ViewBotsPanel from './support/ViewBotsPanel';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\troot: {\r\n    width: '100%',\r\n  }\r\n}));\r\n\r\nexport default function ViewBotsPortal(){\r\n\tdocument.title = 'bots-as-a-service: bots';\r\n\t// eslint-disable-next-line\r\n\tconst classes = useStyles();\r\n\r\n\tconst botsList = fakeResponse.map((payload) =>\r\n\t\t<ViewBotsPanel key={payload.name} payload={payload} />\r\n\t)\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<Container>\r\n\t\t\t\t{botsList}\r\n\t\t\t</Container>\r\n\t\t</React.Fragment>\r\n\t);\r\n}\r\n\r\n// STUB\r\nconst fakeResponse = [\r\n  {\r\n    \"name\": \"stopped-bot01\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": false,\r\n        \"valid\": true\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  },\r\n\t{\r\n    \"name\": \"healthy-bot02\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": true,\r\n        \"valid\": true\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  },\r\n\t{\r\n    \"name\": \"invalid-bot03\",\r\n    \"auth\" : {\r\n        \"client_id\": \"\",\r\n        \"client_secret\" : \"\",\r\n        \"user_agent\" : \"\",\r\n        \"username\": \"\"\r\n    },\r\n    \"status\" : {\r\n        \"online\": false,\r\n        \"valid\": false\r\n    },\r\n    \"config\" : {\r\n        \"valid\": true,\r\n        \"subreddits\" : [\"test\"],\r\n        \"comments_enabled\": true,\r\n        \"livestream_enabled\": false,\r\n        \"comment_calling_syntax\" : \"!\",\r\n        \"services\": []\r\n    }\r\n  }\r\n]\r\n","import React from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport TopNavigationBar from './global-support/TopNavigationBar';\nimport Attribution from './global-support/Attribution';\nimport CreationPortal from './bot-creation/CreationPortal';\nimport ViewBotsPortal from './view-bots/ViewBotsPortal';\n\nexport default function App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <React.Fragment>\n      <ThemeProvider theme={theme}>\n        <TopNavigationBar />\n        <Router>\n          <div>\n            <Switch>\n              <Route path=\"/create\">\n                <Create theme={theme}/>\n              </Route>\n              <Route path=\"/bots\">\n                <Bots theme={theme}/>\n              </Route>\n              <Route path=\"/\">\n                <Redirect to=\"/bots\" />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n        <Attribution />\n      </ThemeProvider>\n    </React.Fragment>\n  );\n}\n\nfunction Create(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <CreationPortal />\n    </ThemeProvider>\n  );\n}\n\nfunction Bots(props) {\n  return (\n    <ThemeProvider theme={props.theme}>\n      <ViewBotsPortal />\n    </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}